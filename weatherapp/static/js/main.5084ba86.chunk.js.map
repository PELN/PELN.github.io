{"version":3,"sources":["wathericonlogo.png","components/Weather.js","components/Forecast.js","components/Home.js","components/News.js","components/Error.js","components/Form.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","props","state","temperature","undefined","city","country","humidity","description","icon","sunrise","sunset","temp_min","temp_max","fetch","then","response","json","result","setState","main","temp","name","sys","weather","toUpperCase","this","className","date","dt","src","React","Component","Forecast","dataList","error","isLoaded","finalResult","list","message","map","data","weatherData","Home","News","Error","Form","onSubmit","event","preventDefault","target","value","console","log","type","placeholder","Navigation","Logo","to","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5084ba86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wathericonlogo.9a8b8981.png\";","import React from 'react';\nimport '../css/Weather.css';\nimport Timestamp from 'react-timestamp';\n\nexport default class Weather extends React.Component{\n    \n    constructor(props){\n        super(props);\n        this.state = {\n            temperature: undefined,\n            city: undefined,\n            country: undefined,\n            humidity: undefined,\n            description: undefined,\n            icon: undefined,\n            sunrise: undefined,\n            sunset: undefined,\n            temp_min: undefined,\n            temp_max: undefined\n        };\n    }\n    \n    componentDidMount() {\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=copenhagen,dk&APPID=4d9346c553e2e7240e772ef6327a5718&units=metric`)\n            .then(response => response.json())\n            .then(result => this.setState({\n                temperature: result.main.temp,\n                city: result.name,\n                country: result.sys.country,\n                humidity: result.main.humidity,\n                description: result.weather[0].description.toUpperCase(),\n                icon: result.weather[0].icon,\n                sunrise: result.sys.sunrise,\n                sunset: result.sys.sunset,\n                temp_min: result.main.temp_min,\n                temp_max: result.main.temp_max\n            }));\n    }\n\n    render(){\n        // console.log(this.state.weather);\n        let icon = this.state.icon;\n\n        return(\n            <div className=\"weatherContainer\">\n                <div className=\"weatherInner\">\n                <h1>Current Weather</h1>\n                    <div className=\"innerGrid\">\n                        <div className=\"leftBox\">\n                            <h2 className=\"weatherCity\">{this.state.city}, {this.state.country}</h2>\n                            <p><Timestamp date={this.state.dt} /></p>\n                            <img className=\"weatherIcon\" src={`https://openweathermap.org/img/wn/${icon}@2x.png`}/>\n                            <h2>{this.state.temperature} 째C</h2>\n                            <h3>{this.state.description}</h3>\n                        </div>\n                        <div className=\"rightBox\">\n                            <h2>Details</h2>\n                            <p>Humidity: {this.state.humidity} %</p>\n                            <p>Min temp: {this.state.temp_min} 째C</p>\n                            <p>Max temp: {this.state.temp_max} 째C</p>\n\n                            <p>Sunrise: <Timestamp date={this.state.sunrise} /></p>\n                            <p>Sunset: <Timestamp date={this.state.sunset} /></p>\n                           \n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","import React from 'react';\nimport Timestamp from 'react-timestamp';\nimport '../css/Forecast.css';\n\nexport default class Forecast extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n           dataList: [],\n           city: \"\",\n           country: \"\",\n           error: null,\n           isLoaded: false\n        };\n    }\n    \n    componentDidMount() {\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=copenhagen,dk&APPID=4d9346c553e2e7240e772ef6327a5718&units=metric`)\n            .then(response => response.json())\n            .then(\n                (finalResult) => {\n                    this.setState({\n                        dataList: finalResult.list,\n                        city: finalResult.city.name,\n                        country: finalResult.city.country,\n                        isLoaded: true\n                    });\n        },\n        (error) => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        )\n    }\n\n    render(){\n        // console.log(this.state.dataList);\n        const { error, isLoaded } = this.state;\n        if (error) {\n          return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n          return <div>Loading...</div>;\n        } else {\n\n        return(\n            <div className=\"forecastContainer\">\n                <h1>Weather Forecast</h1>                \n\n               <div className=\"forecastInner\">\n\n                    {this.state.dataList.map(data =>{\n                        return(\n                        <div className=\"forecastBox\">\n                                <h3>{this.state.city}</h3>\n                                <p><Timestamp date={data.dt}/></p>\n                                <h2>{data.main.temp} 째C</h2>\n\n                                {data.weather.map(weatherData =>{\n                                    let description = weatherData.description.toUpperCase();\n                                    return(\n                                        <div>\n                                            {/* <p>{weatherData.main}</p> */}\n                                            <h4>{description}</h4>\n                                            <img src={`https://openweathermap.org/img/wn/${weatherData.icon}@2x.png`}/>\n                                        </div>\n                                    )\n                                })}                                \n                                <p>Min temp: {data.main.temp_min} 째C</p>\n                                <p>Max temp: {data.main.temp_max} 째C</p>\n                                <p>Humidity: {data.main.humidity} %</p>\n                        </div>\n                        )\n                    })}\n                </div>\n            </div>\n            );\n        };\n    }\n}\n\n","import React from 'react';\nimport Weather from './Weather';\nimport Forecast from './Forecast';\n\nexport default class Home extends React.Component{\n\n    render(){\n\n        return(\n            <div className=\"entire-app\">\n                <Weather/>\n                <Forecast/>\n            </div>\n        );\n    }\n}\n\n","import React from 'react';\n\nconst News = () => {\n    return(\n        <div>News</div>\n    );\n}\n\nexport default News;\n","import React from 'react';\n\nconst Error = () => {\n    return(\n        <div>404 page not found</div>\n    );\n} \n\nexport default Error;\n","import React from 'react';\nimport '../css/Form.css';\n\n\nexport default class Form extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            city: \"\",\n            country: \"\",\n            dataList: []\n        };\n    }\n\n    componentDidMount() {\n        const city = this.state.city;\n        const country = this.state.country;\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&APPID=4d9346c553e2e7240e772ef6327a5718&units=metric`)\n            .then(response => response.json())\n            .then(finalResult => this.setState({\n                dataList: finalResult.list\n            }));\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        // console.log('submit click');\n\n        this.setState({\n            city: event.target.city.value,\n            country: event.target.country.value\n        });\n    }\n\n    render(){\n        console.log(this.state.city);\n        console.log(this.state.country);\n        console.log(this.state.dataList);\n\n        return(\n            <div className=\"formContainer\">\n                <form onSubmit={this.onSubmit}>\n                    <input type=\"text\" name=\"city\" placeholder=\"City\"/>\n                    <input type=\"text\" name=\"country\" placeholder=\"Country\"/>\n                    <button>Find weather</button>\n                </form>\n            </div>\n        );\n    };\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Logo from '../wathericonlogo.png';\nimport '../css/Navigation.css';\nimport Form from './Form';\n\nconst Navigation = () => {\n    return(\n        <div>\n            <div className=\"navContainer\">\n                <div className=\"navInner\">\n                    <img className=\"logo\" src={Logo}/>\n                    <NavLink to=\"/\" className=\"navlink\">Home</NavLink>\n                    <NavLink to=\"/weather\" className=\"navlink\">Weather</NavLink>\n                    <NavLink to=\"/news\" className=\"navlink\">News</NavLink>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Navigation;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Home from './components/Home';\nimport News from './components/News';\nimport Weather from './components/Weather';\nimport Error from './components/Error';\nimport Navigation from './components/Navigation';\nimport Form from './components/Form';\n\nclass App extends React.Component {\n\n  render(){\n\n    return(\n      <Router basename=\"/weatherapp\">\n        <Navigation/>\n        <Form/>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route exact path=\"/news\" component={News}/>\n          <Route exact path=\"/weather\" component={Weather}/>\n          <Route component={Error}/>\n        </Switch>\n      </Router>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}